// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.gov.sspba.domain;

import br.gov.sspba.domain.UserAccount;
import br.gov.sspba.domain.UserRole;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect UserAccount_Roo_Finder {
    
    public static TypedQuery<UserAccount> UserAccount.findUserAccountsByEmailEquals(String email) {
        if (email == null || email.length() == 0) throw new IllegalArgumentException("The email argument is required");
        EntityManager em = UserAccount.entityManager();
        TypedQuery<UserAccount> q = em.createQuery("SELECT o FROM UserAccount AS o WHERE o.email = :email", UserAccount.class);
        q.setParameter("email", email);
        return q;
    }
    
    public static TypedQuery<UserAccount> UserAccount.findUserAccountsByEmailLike(String email) {
        if (email == null || email.length() == 0) throw new IllegalArgumentException("The email argument is required");
        email = email.replace('*', '%');
        if (email.charAt(0) != '%') {
            email = "%" + email;
        }
        if (email.charAt(email.length() - 1) != '%') {
            email = email + "%";
        }
        EntityManager em = UserAccount.entityManager();
        TypedQuery<UserAccount> q = em.createQuery("SELECT o FROM UserAccount AS o WHERE LOWER(o.email) LIKE LOWER(:email)", UserAccount.class);
        q.setParameter("email", email);
        return q;
    }
    
    public static TypedQuery<UserAccount> UserAccount.findUserAccountsByEnabledEquals(String enabled) {
        if (enabled == null || enabled.length() == 0) throw new IllegalArgumentException("The enabled argument is required");
        EntityManager em = UserAccount.entityManager();
        TypedQuery<UserAccount> q = em.createQuery("SELECT o FROM UserAccount AS o WHERE o.enabled = :enabled", UserAccount.class);
        q.setParameter("enabled", enabled);
        return q;
    }
    
    public static TypedQuery<UserAccount> UserAccount.findUserAccountsByFirstNameEquals(String firstName) {
        if (firstName == null || firstName.length() == 0) throw new IllegalArgumentException("The firstName argument is required");
        EntityManager em = UserAccount.entityManager();
        TypedQuery<UserAccount> q = em.createQuery("SELECT o FROM UserAccount AS o WHERE o.firstName = :firstName", UserAccount.class);
        q.setParameter("firstName", firstName);
        return q;
    }
    
    public static TypedQuery<UserAccount> UserAccount.findUserAccountsByFirstNameLike(String firstName) {
        if (firstName == null || firstName.length() == 0) throw new IllegalArgumentException("The firstName argument is required");
        firstName = firstName.replace('*', '%');
        if (firstName.charAt(0) != '%') {
            firstName = "%" + firstName;
        }
        if (firstName.charAt(firstName.length() - 1) != '%') {
            firstName = firstName + "%";
        }
        EntityManager em = UserAccount.entityManager();
        TypedQuery<UserAccount> q = em.createQuery("SELECT o FROM UserAccount AS o WHERE LOWER(o.firstName) LIKE LOWER(:firstName)", UserAccount.class);
        q.setParameter("firstName", firstName);
        return q;
    }
    
    public static TypedQuery<UserAccount> UserAccount.findUserAccountsByLastNameEquals(String lastName) {
        if (lastName == null || lastName.length() == 0) throw new IllegalArgumentException("The lastName argument is required");
        EntityManager em = UserAccount.entityManager();
        TypedQuery<UserAccount> q = em.createQuery("SELECT o FROM UserAccount AS o WHERE o.lastName = :lastName", UserAccount.class);
        q.setParameter("lastName", lastName);
        return q;
    }
    
    public static TypedQuery<UserAccount> UserAccount.findUserAccountsByLastNameLike(String lastName) {
        if (lastName == null || lastName.length() == 0) throw new IllegalArgumentException("The lastName argument is required");
        lastName = lastName.replace('*', '%');
        if (lastName.charAt(0) != '%') {
            lastName = "%" + lastName;
        }
        if (lastName.charAt(lastName.length() - 1) != '%') {
            lastName = lastName + "%";
        }
        EntityManager em = UserAccount.entityManager();
        TypedQuery<UserAccount> q = em.createQuery("SELECT o FROM UserAccount AS o WHERE LOWER(o.lastName) LIKE LOWER(:lastName)", UserAccount.class);
        q.setParameter("lastName", lastName);
        return q;
    }
    
    public static TypedQuery<UserAccount> UserAccount.findUserAccountsByPasswordEquals(String password) {
        if (password == null || password.length() == 0) throw new IllegalArgumentException("The password argument is required");
        EntityManager em = UserAccount.entityManager();
        TypedQuery<UserAccount> q = em.createQuery("SELECT o FROM UserAccount AS o WHERE o.password = :password", UserAccount.class);
        q.setParameter("password", password);
        return q;
    }
    
    public static TypedQuery<UserAccount> UserAccount.findUserAccountsByUserNameEquals(String userName) {
        if (userName == null || userName.length() == 0) throw new IllegalArgumentException("The userName argument is required");
        EntityManager em = UserAccount.entityManager();
        TypedQuery<UserAccount> q = em.createQuery("SELECT o FROM UserAccount AS o WHERE o.userName = :userName", UserAccount.class);
        q.setParameter("userName", userName);
        return q;
    }
    
    public static TypedQuery<UserAccount> UserAccount.findUserAccountsByUserNameLike(String userName) {
        if (userName == null || userName.length() == 0) throw new IllegalArgumentException("The userName argument is required");
        userName = userName.replace('*', '%');
        if (userName.charAt(0) != '%') {
            userName = "%" + userName;
        }
        if (userName.charAt(userName.length() - 1) != '%') {
            userName = userName + "%";
        }
        EntityManager em = UserAccount.entityManager();
        TypedQuery<UserAccount> q = em.createQuery("SELECT o FROM UserAccount AS o WHERE LOWER(o.userName) LIKE LOWER(:userName)", UserAccount.class);
        q.setParameter("userName", userName);
        return q;
    }
    
    public static TypedQuery<UserAccount> UserAccount.findUserAccountsByUserRole(UserRole userRole) {
        if (userRole == null) throw new IllegalArgumentException("The userRole argument is required");
        EntityManager em = UserAccount.entityManager();
        TypedQuery<UserAccount> q = em.createQuery("SELECT o FROM UserAccount AS o WHERE o.userRole = :userRole", UserAccount.class);
        q.setParameter("userRole", userRole);
        return q;
    }
    
}
