// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.gov.sspba.domain;

import br.gov.sspba.domain.Funcionario;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Funcionario_Roo_Finder {
    
    public static Long Funcionario.countFindFuncionariosByMatriculaEquals(String matricula) {
        if (matricula == null || matricula.length() == 0) throw new IllegalArgumentException("The matricula argument is required");
        EntityManager em = Funcionario.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Funcionario AS o WHERE o.matricula = :matricula", Long.class);
        q.setParameter("matricula", matricula);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Funcionario.countFindFuncionariosByMatriculaEqualsOrNomeEqualsOrSobrenomeEquals(String matricula, String nome, String sobrenome) {
        if (matricula == null || matricula.length() == 0) throw new IllegalArgumentException("The matricula argument is required");
        if (nome == null || nome.length() == 0) throw new IllegalArgumentException("The nome argument is required");
        if (sobrenome == null || sobrenome.length() == 0) throw new IllegalArgumentException("The sobrenome argument is required");
        EntityManager em = Funcionario.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Funcionario AS o WHERE o.matricula = :matricula  OR o.nome = :nome  OR o.sobrenome = :sobrenome", Long.class);
        q.setParameter("matricula", matricula);
        q.setParameter("nome", nome);
        q.setParameter("sobrenome", sobrenome);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Funcionario> Funcionario.findFuncionariosByMatriculaEquals(String matricula) {
        if (matricula == null || matricula.length() == 0) throw new IllegalArgumentException("The matricula argument is required");
        EntityManager em = Funcionario.entityManager();
        TypedQuery<Funcionario> q = em.createQuery("SELECT o FROM Funcionario AS o WHERE o.matricula = :matricula", Funcionario.class);
        q.setParameter("matricula", matricula);
        return q;
    }
    
    public static TypedQuery<Funcionario> Funcionario.findFuncionariosByMatriculaEquals(String matricula, String sortFieldName, String sortOrder) {
        if (matricula == null || matricula.length() == 0) throw new IllegalArgumentException("The matricula argument is required");
        EntityManager em = Funcionario.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Funcionario AS o WHERE o.matricula = :matricula");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Funcionario> q = em.createQuery(queryBuilder.toString(), Funcionario.class);
        q.setParameter("matricula", matricula);
        return q;
    }
    
    public static TypedQuery<Funcionario> Funcionario.findFuncionariosByMatriculaEqualsOrNomeEqualsOrSobrenomeEquals(String matricula, String nome, String sobrenome) {
        if (matricula == null || matricula.length() == 0) throw new IllegalArgumentException("The matricula argument is required");
        if (nome == null || nome.length() == 0) throw new IllegalArgumentException("The nome argument is required");
        if (sobrenome == null || sobrenome.length() == 0) throw new IllegalArgumentException("The sobrenome argument is required");
        EntityManager em = Funcionario.entityManager();
        TypedQuery<Funcionario> q = em.createQuery("SELECT o FROM Funcionario AS o WHERE o.matricula = :matricula  OR o.nome = :nome  OR o.sobrenome = :sobrenome", Funcionario.class);
        q.setParameter("matricula", matricula);
        q.setParameter("nome", nome);
        q.setParameter("sobrenome", sobrenome);
        return q;
    }
    
    public static TypedQuery<Funcionario> Funcionario.findFuncionariosByMatriculaEqualsOrNomeEqualsOrSobrenomeEquals(String matricula, String nome, String sobrenome, String sortFieldName, String sortOrder) {
        if (matricula == null || matricula.length() == 0) throw new IllegalArgumentException("The matricula argument is required");
        if (nome == null || nome.length() == 0) throw new IllegalArgumentException("The nome argument is required");
        if (sobrenome == null || sobrenome.length() == 0) throw new IllegalArgumentException("The sobrenome argument is required");
        EntityManager em = Funcionario.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Funcionario AS o WHERE o.matricula = :matricula  OR o.nome = :nome  OR o.sobrenome = :sobrenome");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Funcionario> q = em.createQuery(queryBuilder.toString(), Funcionario.class);
        q.setParameter("matricula", matricula);
        q.setParameter("nome", nome);
        q.setParameter("sobrenome", sobrenome);
        return q;
    }
    
}
