// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).
package br.gov.sspba.domain;

import br.gov.sspba.domain.Bairro;
import br.gov.sspba.domain.Municipio;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Bairro_Roo_Finder {
    
    public static Long Bairro.countFindBairroesByIdMunicipio(Municipio idMunicipio) {
        if (idMunicipio == null) throw new IllegalArgumentException("The idMunicipio argument is required");
        EntityManager em = Bairro.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Bairro AS o WHERE o.idMunicipio = :idMunicipio", Long.class);
        q.setParameter("idMunicipio", idMunicipio);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Bairro> Bairro.findBairroesByIdMunicipio(Municipio idMunicipio) {
        if (idMunicipio == null) throw new IllegalArgumentException("The idMunicipio argument is required");
        EntityManager em = Bairro.entityManager();
        TypedQuery<Bairro> q = em.createQuery("SELECT o FROM Bairro AS o WHERE o.idMunicipio = :idMunicipio", Bairro.class);
        q.setParameter("idMunicipio", idMunicipio);
        return q;
    }
    
    public static TypedQuery<Bairro> Bairro.findBairroesByIdMunicipio(Municipio idMunicipio, String sortFieldName, String sortOrder) {
        if (idMunicipio == null) throw new IllegalArgumentException("The idMunicipio argument is required");
        EntityManager em = Bairro.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Bairro AS o WHERE o.idMunicipio = :idMunicipio");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Bairro> q = em.createQuery(queryBuilder.toString(), Bairro.class);
        q.setParameter("idMunicipio", idMunicipio);
        return q;
    }
    
}
